(ql:quickload :split-sequence)

(defmacro ssq (char sequence)
  `(split-sequence:split-sequence ,char ,sequence))

(defun listify (str)
  (format t "%~S" str)
  (mapcar #'(lambda (num) (read-from-string num))
          (remove-if #'(lambda (str) (string= "" str))
                     (ssq #\Space (string-trim " " str)) )))

(defun parse-card (card)
  (let* ((numbers (string-trim " " (cadr (ssq #\: (string-trim '(#\return) card)))))
         (winning (listify (car (ssq #\| numbers))))
         (present (listify (cadr (ssq #\| numbers))))
         (wins (intersection winning present)))
    (if wins
        (expt 2 (- (length wins) 1))
        0)))

(defun parse-card-2 (card)
  (let* ((numbers (string-trim " " (cadr (ssq #\: (string-trim '(#\return) card)))))
         (winning (listify (car (ssq #\| numbers))))
         (present (listify (cadr (ssq #\| numbers)))))
    (length (intersection winning present))))

(defun paref (array id)
  (unless (null id)
    (aref array id)))

(defun solve-1 ()
  (with-open-file (stream "input.txt")
    (do ((acc 0 (+ acc (parse-card (read-line stream)))))
        ((not (listen stream)) acc))))

(defun solve-2 ()
  (with-open-file (stream "input.txt")
    (let* ((owins (do ((only-wins '()
				  (cons (parse-card-2 (read-line stream))
                                           only-wins)))
                     ((not (listen stream)) (reverse only-wins))))
           (wins (mapcar #'(lambda (id win)
                                (cons id win))
                            (loop for i from 1 to (length owins)
                                  collect i)
                            owins))
           (freqs (progn
                   (make-array (+ (length wins) 1)
                              :initial-element 1) )))
      (do* ((head wins (cdr head))
            (id (caar head) (caar head))
            (id-wins (cdar head) (cdar head))
            (id-copies (paref freqs id) (paref freqs id)))
           ((null head) (- (reduce #'+ freqs) 1))
        (unless (zerop id-wins)
         (loop for i from (+ id 1) to (+ id id-wins)
              do
                 (when  (>= i  (length freqs))
                   (return))
                 (incf (aref freqs i) id-copies)))))))
